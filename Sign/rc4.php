<?php
//https://phpclub.ru/talk/threads/rc4-encrypt-decrypt-%D0%BD%D0%B0-php.10776/

/**
функция rc4_init_s($key)
инициализирует S-блок, необходимый для работы 8-битового
криптоалгоритма rc4, с помощью ключа $key
Возвращает инициализированнй S-блок
 */
function rc4_init_s($key) {
    // инициализация вспомогательного массива $k
    $k = unpack('C*', $key);//Распаковать данные из бинарной строки в массивб (С* - формат)
    //array_unshift - Добавляет один или несколько элементов в начало массива
    //array_shift - извлекает первый элемент массива
    array_unshift($k, array_shift($k));//тут просто меняется индекс в массиве. Сначала с 1 было, стало с 0.

    //Побитовые операторы позволяют считывать и устанавливать конкретные биты целых чисел:
    //a % b – остаток от целочисленного деления числа a на b
    //a ^ b – Исключающее "или". Устанавливаются только те биты, которые установлены либо только в $a, либо только в $b, но не в обоих одновременно.
    //a & b	- "И". Устанавливаются только те биты, которые установлены и в $a, и в $b

    $n = count($k);
    for ($i = $n; $i < 256; $i++)
        $k[$i] = $k[$i % $n];

    for ($i--; $i >= 256; $i--)
        $k[$i & 255] ^= $k[$i];

    // предварительное заполнение S-блока
    $s = [];
    for ($i = 0; $i < 256; $i++)
        $s[$i] = $i;

    $j = 0;
    // инициализация S-блока
    for ($i = 0; $i < 256; $i++) {
        $j = ($j + $s[$i] + $k[$i]) & 255;
        // перестановка $s[$i] и $s[$j]
        $tmp = $s[$i];
        $s[$i] = $s[$j];
        $s[$j] = $tmp;
    }
    return $s;
}

/**
функция rc4_crypt($text, $key)
выполняет шифрование/расшифрование текста/шифртекста $text
с помощью 8-битного потокового криптоалгоритма rc4, используя
в качестве ключа шифрования строку $key
Возвращает зашифрованный/расшифрованный текст/шифртекст
 */
function rc4_crypt($text1, $key) {
    $s = rc4_init_s($key); // инициализация s-блока
    $n = strlen($text1);
    $text2 = '';
    $i = $j = 0;
    for ($k = 0; $k < $n; $k++) {
        $i = ($i + 1) & 255;
        $j = ($j + $s[$i]) & 255;
        // перестановка $s[i] и $s[$j]
        $tmp = $s[$i];
        $s[$i] = $s[$j];
        $s[$j] = $tmp;
        // наложение/снятие гаммы
        $text2 .= $text1{$k} ^ chr($s[$i] + $s[$j]);
        //chr — Генерирует односимвольную строку по заданному числу
    }
    return $text2;
}

/**
функция rc4_encrypt($plain_text, $password)
зашифровывает строку $plain_text с помощью 8-битового алгоритма
шифрования rc4, используя в качестве пароля строку $password
Возвращает base64-encoded шифртекст
 */
function rc4_encrypt($plain_text, $password) {
    return base64_encode(rc4_crypt($plain_text, $password));
}

/**
функция rc4_decrypt($enc_text, $password)
расшифровывает base64-encoded шифртекст $enc_text с помощью
8-битового алгоритма шифрования rc4, используя в качестве
пароля строку $password
 */
function rc4_decrypt($enc_text, $password) {
    return rc4_crypt(base64_decode($enc_text), $password);
}

//Test:
$key = 'werwer';
$coded = rc4_encrypt('Hellow!', $key);
echo rc4_decrypt($coded, $key);//Hellow!